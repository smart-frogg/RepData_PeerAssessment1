?read.csv
library(lubridate)
stepDataSet <- read.csv("../data/activity.csv",
colClasses = c("Integer","character","character"))
stepDataSet$date <- ymd(stepDataSet$date)
stepDataSet$interval <- hm(stepDataSet$interval)
stepDataSet <- read.csv("../data/activity.csv",
colClasses = c("Integer","Character","Character"))
stepDataSet$date <- ymd(stepDataSet$date)
stepDataSet$interval <- hm(stepDataSet$interval)
stepDataSet <- read.csv("../data/activity.csv",
colClasses = c("Integer","character","character"))
stepDataSet <- read.csv("../data/activity.csv")
stepDataSet$date <- ymd(stepDataSet$date)
stepDataSet$interval <- hm(as.Character(stepDataSet$interval))
as.Character(stepDataSet$interval)
stepDataSet$date <- ymd(stepDataSet$date)
stepDataSet$interval <- hm(as.character(stepDataSet$interval))
?format
?as.Date
?substr
23%10
?kmeans
maxActivity = max(stepByIntervals)
timeMaxAxtivity = as.integer(names(stepByIntervals[stepByIntervals==maxActivity]))
plot(as.integer(names(stepByIntervals))/60, stepByIntervals,
type = "l",
main = "Average daily activity pattern",
xlab ="Time (of day, in hours)",
ylab ="Average number of steps across all days")
?deriv
?numericDeriv
?quote
?numericDeriv
myenv <- new.env()
assign("mean", 0., envir = myenv)
assign("sd", 1., envir = myenv)
assign("x", seq(-3., 3., len = 31), envir = myenv)
numericDeriv(quote(pnorm(x, mean, sd)), c("mean", "sd"), myenv)
pnorm(x, mean, sd)
?grad
library(numDeriv)
install.packages("numDeriv")
library(numDeriv)
?grad
stepByIntervals = sapply(split(stepDataSet,stepDataSet$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
library(lubridate)
stepDataSet <- read.csv("../data/activity.csv")
stepDataSet$date <- as.Date(stepDataSet$date)
stepDataSet$minutes = stepDataSet$interval%%100
stepDataSet$hours = stepDataSet$interval%/%100
stepDataSet$dayMinutes = stepDataSet$hours*60+stepDataSet$minutes
stepByIntervals = sapply(split(stepDataSet,stepDataSet$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
grad(function(x){stepByIntervals[x]},stepDataSet$dayMinutes)
grad(function(x){
print(stepByIntervals[x])
stepByIntervals[x]},stepDataSet$dayMinutes)
grad(function(x){
print(stepByIntervals(x))
#print(stepByIntervals[x])
stepByIntervals[x]},stepDataSet$dayMinutes)
gradFunction <- function(x){
print(stepByIntervals(x))
#print(stepByIntervals[x])
stepByIntervals[x]}
grad(gradFunction,stepDataSet$dayMinutes)
gradFunction <- function(x){
print(stepByIntervals[x])
#print(stepByIntervals[x])
stepByIntervals[x]}
grad(gradFunction,stepDataSet$dayMinutes)
gradFunction <- function(x){
y <- stepByIntervals[x]
y}
grad(gradFunction,stepDataSet$dayMinutes)
gradFunction <- function(x){
y <- stepByIntervals[x]
y}
denD(gradFunction,stepDataSet$dayMinutes)
gradFunction <- function(x){
y <- stepByIntervals[x]
y}
genD(gradFunction,stepDataSet$dayMinutes)
?genD
gradFunction(5)
gradFunction <- function(x){
y <- stepByIntervals[x]
names(y)<-NA
y}
grad(gradFunction,stepDataSet$dayMinutes)
gradFunction <- function(x){
y <- stepByIntervals[x]
names(y)<-NA
as.numeric(y)}
grad(gradFunction,stepDataSet$dayMinutes)
gradFunction(5)
gradFunction <- function(x){
y <- stepByIntervals[x]
names(y)<-NA
as.numeric(y[0])}
grad(gradFunction,stepDataSet$dayMinutes)
example(grad)
gradFunction <- function(x){
y <- stepByIntervals[[x]]
names(y)<-NA
as.numeric(y[0])}
grad(gradFunction,stepDataSet$dayMinutes)
grad(gradFunction,stepDataSet$dayMinutes, method="simple", methods.args=list(eps=5))
grad(gradFunction,stepDataSet$dayMinutes, method="simple", method.args=list(eps=5))
gradFunction <- function(x){
y <- stepByIntervals[x]
names(y)<-NA
as.numeric(y[0])}
grad(gradFunction,stepDataSet$dayMinutes, method="simple", method.args=list(eps=5))
24*60
(24*60-5)/5
dif=c()
for(i in 2:288)
{
dif[5*i] <- stepByIntervals[5*(i)]-stepByIntervals[5*(i-1)]
}
plot(as.integer(names(dif))/60, dif,
type = "l")
dif
for(i in 2:288)
{
print(5*i)
dif[5*i] <- stepByIntervals[5*(i)]-stepByIntervals[5*(i-1)]
}
plot(as.integer(names(dif))/60, dif,
type = "l")
stepByIntervals[500]
stepByIntervals <- sapply(split(stepDataSet,stepDataSet$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
stepByIntervals[500]
stepByIntervals
names(stepByIntervals)
dif=c()
for(i in 2:288)
{
name=as.character(5*i)
dif[name] <- stepByIntervals[name]-stepByIntervals[as.character(5*(i-1))]
}
plot(as.integer(names(dif))/60, dif,
type = "l")
200/5
(200/5)*60*2
(200/5)*60*0.7
wday(stepDataSet$date)
?wday
wday(stepDataSet$date, abbr=T)
wday(stepDataSet$date, label=T)
wday(stepDataSet$date, label=T)[100]
wday(stepDataSet$date)[100]
stepDataSet <- read.csv("../data/activity.csv")
stepDataSet$date <- as.Date(stepDataSet$date)
stepDataSet$weekend <- wday(stepDataSet$date)==1 || wday(stepDataSet$date)==7
stepDataSet$minutes <- stepDataSet$interval%%100
stepDataSet$hours <- stepDataSet$interval%/%100
stepDataSet$dayMinutes <- stepDataSet$hours*60+stepDataSet$minutes
?ggplot
library(ggplot)
install.packages("ggplot")
?ggplot
library(ggplot)
?ggplot
install.packages("ggplot2")
library(ggplot2)
?ggplot
stepDataSet <- read.csv("../data/activity.csv")
stepDataSet$date <- as.Date(stepDataSet$date)
stepDataSet$weekend <- wday(stepDataSet$date)==1 || wday(stepDataSet$date)==7
stepDataSet$minutes <- stepDataSet$interval%%100
stepDataSet$hours <- stepDataSet$interval%/%100
stepDataSet$dayMinutes <- stepDataSet$hours*60+stepDataSet$minutes
weekendSteps = stepDataSet[stepDataSet$weekend]
weekdaySteps = stepDataSet[!stepDataSet$weekend]
weekendStepByIntervals <- sapply(split(weekendSteps,weekendSteps$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
weekdayStepByIntervals <- sapply(split(weekdaySteps,weekdaySteps$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
library(ggplot2)
p1 <-
ggplot(weekendStepByIntervals) +
geom_line() +
ggtitle("Weekends")
p1 <-
ggplot(weekdayStepByIntervals) +
geom_line() +
ggtitle("Weekdays")
multiplot(p1, p2, cols=1)
weekendSteps = stepDataSet[,stepDataSet$weekend]
weekdaySteps = stepDataSet[,!stepDataSet$weekend]
head(stepDataSet[stepDataSet$weekend])
head(stepDataSet[stepDataSet$weekend,])
head(stepDataSet$weekend)
sum(stepDataSet$weekend)
?||
((wday(stepDataSet$date)==1) || (wday(stepDataSet$date)==7))
wday(stepDataSet$date)
wday(stepDataSet$date)==1
wday(stepDataSet$date)==7
((wday(stepDataSet$date)!=1) && (wday(stepDataSet$date)!=7))
((wday(stepDataSet$date)!=1) & (wday(stepDataSet$date)!=7))
stepDataSet <- read.csv("../data/activity.csv")
stepDataSet$date <- as.Date(stepDataSet$date)
stepDataSet$weekend <- ((wday(stepDataSet$date)==1) | (wday(stepDataSet$date)==7))
stepDataSet$minutes <- stepDataSet$interval%%100
stepDataSet$hours <- stepDataSet$interval%/%100
stepDataSet$dayMinutes <- stepDataSet$hours*60+stepDataSet$minutes
weekendSteps = stepDataSet[,stepDataSet$weekend]
weekdaySteps = stepDataSet[,!stepDataSet$weekend]
weekendSteps = stepDataSet[stepDataSet$weekend]
weekdaySteps = stepDataSet[!stepDataSet$weekend]
stepDataSet$weekend
stepDataSet[stepDataSet$weekend,]
weekendSteps = stepDataSet[stepDataSet$weekend,]
weekdaySteps = stepDataSet[!stepDataSet$weekend,]
weekendStepByIntervals <- sapply(split(weekendSteps,weekendSteps$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
weekdayStepByIntervals <- sapply(split(weekdaySteps,weekdaySteps$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
library(ggplot2)
p1 <-
ggplot(weekendStepByIntervals) +
geom_line() +
ggtitle("Weekends")
p1 <-
ggplot(weekdayStepByIntervals) +
geom_line() +
ggtitle("Weekdays")
multiplot(p1, p2, cols=1)
tmpWeekendStepByIntervals <- sapply(split(weekendSteps,weekendSteps$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
weekendStepByIntervals = list(
"dayMinutes" => as.integer(names(tmpWeekendStepByIntervals)),
"avg" => tmpWeekendStepByIntervals
)
tmpWeekdayStepByIntervals <- sapply(split(weekdaySteps,weekdaySteps$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
weekdayStepByIntervals = list(
"dayMinutes" => as.integer(names(tmpWeekdayStepByIntervals)),
"avg" => tmpWeekdayStepByIntervals
)
tmpWeekendStepByIntervals <- sapply(split(weekendSteps,weekendSteps$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
weekendStepByIntervals = list(
"dayMinutes" = as.integer(names(tmpWeekendStepByIntervals)),
"avg" = tmpWeekendStepByIntervals
)
tmpWeekdayStepByIntervals <- sapply(split(weekdaySteps,weekdaySteps$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
weekdayStepByIntervals = list(
"dayMinutes" = as.integer(names(tmpWeekdayStepByIntervals)),
"avg" = tmpWeekdayStepByIntervals
)
p1 <-
ggplot(weekendStepByIntervals) +
geom_line() +
ggtitle("Weekends")
p2 <-
ggplot(weekdayStepByIntervals) +
geom_line() +
ggtitle("Weekdays")
multiplot(p1, p2, cols=1)
tmpWeekendStepByIntervals <- sapply(split(weekendSteps,weekendSteps$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
weekendStepByIntervals = data.frame(
dayMinutes = as.integer(names(tmpWeekendStepByIntervals)),
avg = tmpWeekendStepByIntervals
)
tmpWeekdayStepByIntervals <- sapply(split(weekdaySteps,weekdaySteps$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
weekdayStepByIntervals = data.frame(
dayMinutes = as.integer(names(tmpWeekdayStepByIntervals)),
avg = tmpWeekdayStepByIntervals
)
p1 <-
ggplot(weekendStepByIntervals) +
geom_line() +
ggtitle("Weekends")
p2 <-
ggplot(weekdayStepByIntervals) +
geom_line() +
ggtitle("Weekdays")
multiplot(p1, p2, cols=1)
ggplot(weekendStepByIntervals) +
geom_line() +
ggtitle("Weekends")
ggplot(weekendStepByIntervals)
ggplot(weekendStepByIntervals,aes(x = dayMinutes, y = avg))
qgplot(weekendStepByIntervals,aes(x = dayMinutes, y = avg))
qplot(weekendStepByIntervals,aes(x = dayMinutes, y = avg))
?qplot
qgplot(weekendStepByIntervals$dayMinutes, weekendStepByIntervals$avg))
qgplot(weekendStepByIntervals$dayMinutes, weekendStepByIntervals$avg)
qplot(weekendStepByIntervals$dayMinutes, weekendStepByIntervals$avg)
qgplot(weekendStepByIntervals$dayMinutes, weekendStepByIntervals$avg,geom="line"))
?geom
qplot(weekendStepByIntervals$dayMinutes, weekendStepByIntervals$avg,geom="line")
p1 <-
qplot(weekendStepByIntervals$dayMinutes, weekendStepByIntervals$avg,geom="line")
p2 <-
qplot(weekdayStepByIntervals$dayMinutes, weekdayStepByIntervals$avg,geom="line")
multiplot(p1, p2, cols=1)
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1, p2, cols=1)
?qplot
?wday
?data.frame
>c
?c
stepDataSetWithoutNA = data.frame(
steps = c(Integer),
date = c(Date),
weekend = c(Logic),
minutes = c(Integer),
hours = c(Integer),
dayMinutes = c(Integer)
)
stepDataSetWithoutNA = data.frame(
steps = c(integer),
date = c(date),
weekend = c(logic),
minutes = c(integer),
hours = c(integer),
dayMinutes = c(integer)
)
stepDataSetWithoutNA = data.frame(
steps = c(integer),
date = c(date),
weekend = c(logical),
minutes = c(integer),
hours = c(integer),
dayMinutes = c(integer)
)
stepDataSet <- read.csv("../data/activity.csv")
stepDataSet$date <- as.Date(stepDataSet$date)
stepDataSet$weekend <- ((wday(stepDataSet$date)==1) | (wday(stepDataSet$date)==7))
stepDataSet$minutes <- stepDataSet$interval%%100
stepDataSet$hours <- stepDataSet$interval%/%100
stepDataSet$dayMinutes <- stepDataSet$hours*60+stepDataSet$minutes
stepByDays <- sapply(split(stepDataSet,stepDataSet$date),
function(x) {
sum(x$steps,na.rm = TRUE)
})
meanPerDays <- mean(stepByDays)
medianPerDays <- median(stepByDays)
stepByIntervals <- sapply(split(stepDataSet,stepDataSet$dayMinutes),
function(x) {
mean(x$steps,na.rm = TRUE)
})
for (row in stepDataSet)
{
newRow <- row
if (is.na(newRow$steps))
{
newRow$steps <- stepByIntervals[[newRow$dayMinutes]]
}
rbind(stepDataSetWithoutNA, newRow)
}
for (row in stepDataSet)
{
print(row)
newRow <- row
if (is.na(newRow$steps))
{
newRowsteps <- stepByIntervals[[newRow$dayMinutes]]
}
rbind(stepDataSetWithoutNA, newRow)
}
for (i in 1:nrow(stepDataSet))
{
newRow <- stepDataSet[i,]
if (is.na(newRow$steps))
{
newRowsteps <- stepByIntervals[[newRow$dayMinutes]]
}
rbind(stepDataSetWithoutNA, newRow)
}
head(stepDataSetWithoutNA)
for (i in 1:nrow(stepDataSet))
{
newRow <- stepDataSet[i,]
if (is.na(newRow$steps))
{
newRowsteps <- stepByIntervals[as.character(newRow$dayMinutes)]
}
rbind(stepDataSetWithoutNA, newRow)
}
head(stepDataSetWithoutNA)
stepDataSetWithoutNA <- stepDataSet
for (i in 1:nrow(stepDataSet))
{
newRow <- stepDataSetWithoutNA[i,]
if (is.na(newRow$steps))
{
newRow$steps <- stepByIntervals[as.character(newRow$dayMinutes)]
}
stepDataSetWithoutNA[i,] <- newRow
}
(weekendStepByIntervals$dayMinutes)/60,
weekdayStepByIntervals$dayMinutes/60,
as.integer(weekendStepByIntervals$dayMinutes)/60,
weekdayStepByIntervals$dayHours,
weekendStepByIntervals$dayHours,weekendStepByIntervals$avg,
weekdayStepByIntervals$dayMinutes,
install.packages("ggplot2")
install.packages("lubridate")
install.packages("grid")
For more convinient to read I insert computed values into text. All digits printed by bold font in the report obtained using code chunks like this:
library(lubridate)
---
install.packages("knitr")
install.packages("knitr")
install.packages("htmltools")
install.packages("caTools")
install.packages("markdown")
output:
xlab = "Time (of day, in hours)",
library(ggplot2)
library(grid)
source("../scripts/multiplot.R")
p1 <- qplot(
weekendStepByIntervals$dayMinutes,
weekendStepByIntervals$avg,
geom = "line",
main = "Average daily activity pattern for weekends",
xlab = "Time (of day, in hours)",
ylab = "Average number of steps",
ylim = c(0,300))
p2 <- qplot(
weekdayStepByIntervals$dayMinutes,
weekdayStepByIntervals$avg,
geom = "line",
main = "Average daily activity pattern for weekdays",
xlab = "Time (of day, in hours)",
ylab = "Average number of steps",
ylim = c(0,300))
multiplot(p1, p2, cols=1)
library(lubridate)
stepDataSet <- read.csv("../data/activity.csv")
stepDataSet$date <- as.Date(stepDataSet$date)
stepDataSet$weekend <- ((wday(stepDataSet$date)==1) | (wday(stepDataSet$date)==7))
stepDataSet$minutes <- stepDataSet$interval%%100
stepDataSet$hours <- stepDataSet$interval%/%100
stepDataSet$dayMinutes <- stepDataSet$hours*60+stepDataSet$minutes
```
## What is mean total number of steps taken per day?
To answer this question we transform our dataset to `stepByDays`. It is an integer vector. Every element of this vector contains the total number of steps taken each day and is annotated by date. Then we calculate mean and median for transformed dataset.
```{r}
stepByDays <- sapply(split(stepDataSet,stepDataSet$date),
function(x) {
install.packages("rmarkdown")
sum(x$steps,na.rm = TRUE)
})
